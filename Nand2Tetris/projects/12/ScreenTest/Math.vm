function Math.init 0
push constant 16
call Array.new 1
pop static 0
push static 0
push constant 0
add
pop temp 0
push constant 1
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 1
add
pop temp 0
push constant 2
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 2
add
pop temp 0
push constant 4
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 3
add
pop temp 0
push constant 8
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 4
add
pop temp 0
push constant 16
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 5
add
pop temp 0
push constant 32
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 6
add
pop temp 0
push constant 64
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 7
add
pop temp 0
push constant 128
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 8
add
pop temp 0
push constant 256
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 9
add
pop temp 0
push constant 512
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 10
add
pop temp 0
push constant 1024
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 11
add
pop temp 0
push constant 2048
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 12
add
pop temp 0
push constant 4096
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 13
add
pop temp 0
push constant 8192
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 14
add
pop temp 0
push constant 16384
push temp 0
pop pointer 1
pop that 0
push static 0
push constant 15
add
pop temp 0
push constant 16384
push constant 16384
add
push temp 0
pop pointer 1
pop that 0
push constant 0
return

function Math.bit 0
push argument 0
push static 0
push argument 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
return

function Math.two_to_the 0
push static 0
push argument 0
add
pop pointer 1
push that 0
return

function Math.abs 0
push argument 0
push constant 0
lt
if-goto if_body_0
goto if_end_0
label if_body_0
push argument 0
neg
pop argument 0
goto end_0
label if_end_0
label end_0
push argument 0
return

function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label while_start_1
push local 2
push constant 16
lt
if-goto while_body_1
goto while_end_1
label while_body_1
push argument 1
push local 2
call Math.bit 2
if-goto if_body_2
goto if_end_2
label if_body_2
push local 0
push local 1
add
pop local 0
goto end_2
label if_end_2
label end_2
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto while_start_1
label while_end_1
push local 0
return

function Math.divide 4
push argument 0
push constant 0
lt
pop local 0
push argument 1
push constant 0
lt
pop local 1
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt
if-goto if_body_3
goto if_end_3
label if_body_3
push constant 0
return
goto end_3
label if_end_3
label end_3
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 2
push argument 0
push constant 2
push local 2
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
if-goto if_body_4
goto if_end_4
label if_body_4
push local 2
push local 2
add
pop local 3
goto end_4
label if_end_4
push local 2
push local 2
add
push constant 1
add
pop local 3
label end_4
push local 0
push local 1
eq
if-goto if_body_5
goto if_end_5
label if_body_5
push local 3
return
goto end_5
label if_end_5
push local 3
neg
return
label end_5

function Math.mod 1
push argument 0
push argument 1
call Math.divide 2
pop local 0
push argument 0
push local 0
push argument 1
call Math.multiply 2
sub
return

function Math.sqrt 4
push constant 0
pop local 1
push constant 7
pop local 0
label while_start_6
push local 0
push constant 0
lt
not
if-goto while_body_6
goto while_end_6
label while_body_6
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
if-goto if_body_7
goto if_end_7
label if_body_7
push local 2
pop local 1
goto end_7
label if_end_7
label end_7
push local 0
push constant 1
sub
pop local 0
goto while_start_6
label while_end_6
push local 1
return

function Math.max 0
push argument 0
push argument 1
gt
if-goto if_body_8
goto if_end_8
label if_body_8
push argument 0
return
goto end_8
label if_end_8
push argument 1
return
label end_8

function Math.min 0
push argument 0
push argument 1
lt
if-goto if_body_9
goto if_end_9
label if_body_9
push argument 0
return
goto end_9
label if_end_9
push argument 1
return
label end_9

