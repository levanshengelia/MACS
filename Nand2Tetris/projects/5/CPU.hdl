// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */

/*
A:
writeM = 0
PC = PC + 1

C:
outM = M
writeM = if M is in dest
adressM = A register
PC = A if jump is true otherwise PC + 1

*/
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //A: if instruction is A type or it is type c and dest bits contain A
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=aRegisterInput);
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=shouldAChange);
    //addressM
    ARegister(in=aRegisterInput, load=shouldAChange, out=aRegisterOut, out[0..14]=addressM);

    //ALU: if it is C instruction I should do ALU comp. The inputs of ALU is D and A or M. from instruction comp bits i should deduct the input is A or M
    //  A or M
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=aluInputAM);
    //  D: if it is C instruction and dest bits contain D then D must change
    And(a=instruction[15], b=instruction[4], out=shouldDChange);
    DRegister(in=aluOutput, load=shouldDChange, out=dRegisterOut);
    // seed the c instruction comp bits to alu
    ALU(x=dRegisterOut, y=aluInputAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], 
        no=instruction[6], out=aluOutput, out=outM, zr=aluZr, ng=aluNg);

    //writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    //PC
    //  cases when jump condition is true
    And(a=instruction[2], b=aluNg, out=condition0);
    And(a=instruction[1], b=aluZr, out=condition1);
    Or(a=aluNg, b=aluZr, out=ngOrZr);
    Not(in=ngOrZr, out=areNgAndZr0);
    And(a=instruction[0], b=areNgAndZr0, out=condition2);

    Or(a=condition0, b=condition1, out=temp0);
    Or(a=temp0, b=condition2, out=temp1);

    // only jump when it is c instruction
    And(a=instruction[15], b=temp1, out=load);
    
    Not(in=load, out=inc);

    PC(in=aRegisterOut, load=load, inc=inc, reset=reset, out[0..14]=pc);
}