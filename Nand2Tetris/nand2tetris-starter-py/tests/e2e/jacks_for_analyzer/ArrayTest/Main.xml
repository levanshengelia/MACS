<class>
<keyword> class </keyword>
<CLASS_NAME_identifier_> Main </identifier>
<symbol> { </symbol>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<METHOD_NAME_identifier_> main </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<_identifier_> Array </identifier>
<VAR_identifier_0_VarDecReason.DEFINITION> a </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<VAR_identifier_1_VarDecReason.DEFINITION> length </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<VAR_identifier_2_VarDecReason.DEFINITION> i </identifier>
<symbol> , </symbol>
<_identifier_> sum </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<VAR_identifier_1_VarDecReason.USE> length </identifier>
<symbol> = </symbol>
<expression>
<term>
<_identifier_> Keyboard </identifier>
<symbol> . </symbol>
<_identifier_> readInt </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> HOW MANY NUMBERS?  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<VAR_identifier_0_VarDecReason.USE> a </identifier>
<symbol> = </symbol>
<expression>
<term>
<_identifier_> Array </identifier>
<symbol> . </symbol>
<_identifier_> new </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<VAR_identifier_1_VarDecReason.USE> length </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<VAR_identifier_2_VarDecReason.USE> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<VAR_identifier_2_VarDecReason.USE> i </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<VAR_identifier_1_VarDecReason.USE> length </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<VAR_identifier_0_VarDecReason.USE> a </identifier>
<symbol> [ </symbol>
<expression>
<term>
<VAR_identifier_2_VarDecReason.USE> i </identifier>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<_identifier_> Keyboard </identifier>
<symbol> . </symbol>
<_identifier_> readInt </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> ENTER THE NEXT NUMBER:  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<VAR_identifier_2_VarDecReason.USE> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<VAR_identifier_2_VarDecReason.USE> i </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<letStatement>
<keyword> let </keyword>
<VAR_identifier_2_VarDecReason.USE> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<_identifier_> sum </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<VAR_identifier_2_VarDecReason.USE> i </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<VAR_identifier_1_VarDecReason.USE> length </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<_identifier_> sum </identifier>
<symbol> = </symbol>
<expression>
<term>
<_identifier_> sum </identifier>
</term>
<symbol> + </symbol>
<term>
<VAR_identifier_0_VarDecReason.USE> a </identifier>
<symbol> [ </symbol>
<expression>
<term>
<VAR_identifier_2_VarDecReason.USE> i </identifier>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<VAR_identifier_2_VarDecReason.USE> i </identifier>
<symbol> = </symbol>
<expression>
<term>
<VAR_identifier_2_VarDecReason.USE> i </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<doStatement>
<keyword> do </keyword>
<_identifier_> Output </identifier>
<symbol> . </symbol>
<_identifier_> printString </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> THE AVERAGE IS:  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<_identifier_> Output </identifier>
<symbol> . </symbol>
<_identifier_> printInt </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<_identifier_> sum </identifier>
</term>
<symbol> / </symbol>
<term>
<VAR_identifier_1_VarDecReason.USE> length </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<_identifier_> Output </identifier>
<symbol> . </symbol>
<_identifier_> println </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
